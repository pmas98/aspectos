// parser.cup

// -------------------- Package and Imports --------------------
// Removed package declaration to use default package
import java_cup.runtime.*;

// -------------------- Terminal Declarations --------------------
// These are the tokens (lexemes) returned by your JFlex scanner.
// Keywords
terminal IS, HAS, WHEN, ELSE, LOOP, SAY, DO, DONE, MAKE, FUNCTION, USE;
terminal NOT, SAME, AS;
terminal BE, AND, OR, CAN;  // Added missing terminals that are used in scanner

// Operators
terminal PLUS, MINUS, MULT, DIV;

// Delimiters
terminal LPAREN, RPAREN, SEMICOLON;

// Literals and Identifiers (with associated value types if any)
terminal String ID;          // Identifier, e.g., BABA, APPLE
terminal Integer INT_CONST;   // Integer constant, e.g., 0, 1, 5
terminal Float FLOAT_CONST; // Float constant, e.g., 3.14 (supported by scanner)
terminal String STRING_CONST;// String constant, e.g., "BLOCKED", "YAY"

// Note: Terminals CAN, BE, AND, OR from the scanner are not used in the
// provided grammar examples, so they are omitted here. If needed, they
// should be declared and incorporated into the grammar rules.


// -------------------- Non-Terminal Declarations --------------------
// These are the syntactic categories used in the grammar rules.
non terminal program;              // The root of the grammar
non terminal statement_list;       // A sequence of statements
non terminal statement;            // A single statement

non terminal variable_declaration; // e.g., BABA HAS 5
non terminal assignment_statement; // e.g., APPLE IS APPLE + 1
non terminal if_statement;        // WHEN ... DO ... ELSE ... DONE
non terminal while_statement;     // LOOP ... DO ... DONE
non terminal function_definition; // MAKE FUNCTION ... DO ... DONE
non terminal function_call;       // USE ...
non terminal say_statement;       // SAY ...

non terminal expression;           // General expression (arithmetic, ID, or string)
non terminal arithmetic_expression;// For arithmetic operations specifically
non terminal boolean_expression;    // For conditions in WHEN/LOOP


// -------------------- Precedences and Associativity --------------------
// Defines operator precedence to resolve ambiguities in expressions.
// Lowest precedence at the top, highest at the bottom.
precedence left PLUS, MINUS;        // Addition and subtraction (left-associative)
precedence left MULT, DIV;          // Multiplication and division (left-associative)
// Comparison keywords (IS, SAME, AS, NOT) are handled structurally in boolean_expression rules,
// not via precedence here, to match the "phrase-like" structure.


// -------------------- The Grammar Rules --------------------
// Defines the syntactic structure of the language.

// The start symbol for the grammar
start with program;

// a. Estrutura do programa
program ::=
    statement_list
    ;

statement_list ::=
    statement
    | statement_list statement
    ;

statement ::=
    variable_declaration SEMICOLON
    | assignment_statement SEMICOLON
    | if_statement
    | while_statement
    | function_definition
    | function_call SEMICOLON
    | say_statement SEMICOLON
    // | error // Uncomment and refine for error recovery if needed
    ;

// b. Declaração de variáveis
// Example: APPLE HAS 1
// Example: BABA HAS 5
variable_declaration ::=
    ID HAS expression
    ;

// e. Expressões e atribuições (Assignment)
// Example: APPLE IS APPLE + 1
// Example: BABA IS BABA - 1
assignment_statement ::=
    ID IS expression
    ;

// c. Estruturas de controle
// If-Else
// Example: WHEN BABA IS SAME AS WALL DO SAY "BLOCKED" ELSE SAY "MOVE" DONE
// Example: WHEN APPLE IS SAME AS 2 DO SAY "YAY" DONE
if_statement ::=
    WHEN boolean_expression DO statement_list DONE
    | WHEN boolean_expression DO statement_list ELSE statement_list DONE
    ;

// While
// Example: LOOP BABA IS NOT 0 DO SAY BABA BABA IS BABA - 1 DONE
while_statement ::=
    LOOP boolean_expression DO statement_list DONE
    ;

// d. Definições e chamadas de funções
// Definition
// Example: MAKE FUNCTION ADD_TWO X DO X IS X + 2 SAY X DONE
function_definition ::=
    MAKE FUNCTION ID:funcName ID:paramName DO statement_list DONE
    ;

// Call
// Example: USE ADD_TWO 3
function_call ::=
    USE ID:funcName expression:arg
    ;

// Say statement (Output)
// Example: SAY "BLOCKED"
// Example: SAY BABA
// Example: SAY FACT
say_statement ::=
    SAY expression
    ;

// Boolean Expressions for WHEN and LOOP conditions
// Example: BABA IS SAME AS WALL
// Example: APPLE IS SAME AS 2
// Example: BABA IS NOT 0
// Example: BABA IS NOT 1
boolean_expression ::=
    expression:e1 IS SAME AS expression:e2
    | expression:e1 IS NOT expression:e2 // Handles "IS NOT" as a phrase
    ;

// General expression: can be an arithmetic expression or a string constant.
// Used where either type is valid (e.g., assignment, say, comparison operands).
expression ::=
    arithmetic_expression
    | STRING_CONST:strVal
    ;

// Arithmetic expressions: operations, parentheses, identifiers, and numeric constants.
// Precedence rules (PLUS, MINUS, MULT, DIV) apply here.
arithmetic_expression ::=
    arithmetic_expression:e1 PLUS arithmetic_expression:e2
    | arithmetic_expression:e1 MINUS arithmetic_expression:e2
    | arithmetic_expression:e1 MULT arithmetic_expression:e2
    | arithmetic_expression:e1 DIV arithmetic_expression:e2
    | LPAREN arithmetic_expression:e RPAREN
    | ID:name
    | INT_CONST:val
    | FLOAT_CONST:fVal // Included as scanner supports it
    ;